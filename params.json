{"name":"Webaudio-controls","tagline":"GUI parts library for Web application using [Polymer] WebComponents","body":"# webaudio-controls\r\n\r\n**WebAudioControls** is GUI parts library for Web application using [Polymer] WebComponents.  \r\nEspecially suitable for audio-applications like VST plugins.  \r\n\r\n**WebAudioControls** is consist of following components  \r\n\r\nComponent | Description \r\n---|---\r\nwebaudio-knob | Rotating or some other frame-by-frame animation knob\r\nwebaudio-slider | Vertical or Horizontal slider\r\nwebaudio-switch | Toggle/Kick/Radio switches\r\nwebaudio-param | Editable value display field\r\nwebaudio-keyboard | Mouse/Touch playable keyboard. multi-touch support.\r\n\r\nChrome / Firefox / Safari / Opera / IE compatible  \r\niOS and Android touch devices compatible  \r\n\r\n[Live Demo sample1 (with external image-files)](https://rawgithub.com/g200kg/webaudio-controls/master/sample1.html)  \r\n[Live Demo sample2 (with code example)](https://rawgithub.com/g200kg/webaudio-controls/master/sample2.html)  \r\n[Live Demo sample3 (Knob/Slider/Switch/Param/Keyboard default style)](https://rawgithub.com/g200kg/webaudio-controls/master/sample3.html)  \r\n[Live Demo sample4 (webaudio-keyboard to webMIDIAPI)](https://rawgithub.com/g200kg/webaudio-controls/master/sample4.html)  \r\n (need Mac+ChromeCanary+flagEnabled+MIDIdevice or Win+JazzPlugin or Mac+JazzPlugin+MidiDevice)  \r\n[Renoid : Practical application using webaudio-controls](http://www.g200kg.com/renoid/)  \r\n\r\nUsing with external image-files.  \r\n[![](img/demo.png)](https://rawgithub.com/g200kg/webaudio-controls/master/sample1.html)  \r\n\r\nDefault style with no external image-files.  \r\n[![](img/sample3.png)](https://rawgithub.com/g200kg/webaudio-controls/master/sample3.html)  \r\n\r\n## To Operate  \r\nOperation | Component | Description\r\n---|---|---\r\n**Click** | Switch/Param | toggle / activate the switch or focus the param\r\n**Drag** | Knob/Slider | up/right to increase value / down/left to decrease value\r\n**Shift+Drag** | Knob/Slider | fine control\r\n**Ctrl+Click / Command+Click(Mac)** | Knob/Slider/Switch | set to default value\r\n**Edit with Keyboard** | Param | edit the value directly\r\n**MouseWheel** | Knob/Slider | rotate upward to increase value / downward to decrease value\r\n**Shift+MouseWheel** | Knob/Slider | fine control\r\n**Mouse Button Press / Touch** | Keyboard | play keyboard. multi-touch is supported\r\n\r\n---\r\n## How to use\r\n\r\n- load polymer.js\r\n> &lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/polymer/0.0.20130816/polymer.min.js\"&gt;&lt;/script&gt;  \r\n\r\n- link to webaudio-knob component\r\n> &lt;link rel=\"import\" href=\"components/controls.html\" &gt;\r\n\r\n- insert `webaudio-knob/slider/switch/param/keyboard` element\r\n> &lt;webaudio-knob src=\"img/LittlePhatty.png\" sprites=\"100\" min=\"0\" max=\"100\"&gt;&lt;/webaudio-knob&gt;  \r\n> &lt;webaudio-slider src=\"img/hsliderbody.png\"&gt;&lt;/webaudio-slider&gt;  \r\n> &lt;webaudio-switch src=\"img/switch_toggle.png\" width=\"32\" height=\"32\"&gt;&lt;/webaudio-switch&gt;  \r\n> &lt;webaudio-param src=\"\" link=\"knob-1\"&gt;&lt;/webaudio-param&gt;  \r\n> &lt;webaudio-keyboard keys=\"25\" &gt;&lt;/webaudio-keyboard&gt;  \r\n\r\n---\r\n## Attributes\r\n\r\n### webaudio-knob\r\n\r\nAttribute  | Options      | Default          | Description\r\n---        | ---                  | ---                 | ---\r\n**src** | string | Internal embedded resource is used if not specified | url of the vertical stitched knob image\r\n**value** | float | `0` | The current value. Also used as initial value if specified\r\n**defvalue** | float | Initial 'value' is used if not specified | The default value that will be used when ctrl+click\r\n**min** | float | `0` | Minimum value of the knob\r\n**max** | float | `100` | Maximum value of the knob\r\n**step** | float | `1` | Value step of the control. The 'value' is always rounded to multiple of 'step'\r\n**width** | int | `64` | Knob display width in px\r\n**height** | int | `64` | Knob display height in px\r\n**diameter** | int | `64` | Knob display diameter in px. This attribute can be used instead of width / height if the display image is square\r\n**sprites** | int | `0` | if `0`, the \"src\" image should be single frame image that indicate middle position. the image will be rotated -135deg to +135deg. if \"sprirites\" is not `0`, the \"src\" image should be stitched multi-framed image. \"sprites\" specify the max frame number in the stitched knob image. Note that this is (number of frames) - 1\r\n**sensitivity** | float | `1` | Pointing device sensitivity. min-max range correspond to (128 / 'sensitivity') px\r\n**valuetip** | `0`,`1` | `1` | Enable the overlaid value-tip display.\r\n**tooltip** | string | `null` | Tooltip text that will be shown when mouse hover a while\r\n**enable** | `0`,`1` | `1` | Enable control with the pointing device.\r\n\r\n### webaudio-slider\r\n\r\nAttribute  | Options      | Default          | Description\r\n---        | ---                  | ---                 | ---\r\n**src** | string | Internal embedded resource is used if not specified | url of the slider background image\r\n**knobsrc** | string | Internal embedded resouce is used if not specified | url of the slider knob part image\r\n**value** | float | `0` | The current value. Also used as initial value if specified\r\n**defvalue** | float | Initial 'value' is used if not specified | The default value that will be used when ctrl+click\r\n**min** | float | `0` | Minimum value of the slider\r\n**max** | float | `100` | Maximum value of the slider\r\n**step** | float | `1` | Value step of the control. The 'value' is always rounded to multiple of 'step'\r\n**width** | int | `24` | Slider display width in px\r\n**height** | int | `128` | Slider display height in px\r\n**knobwidth** | int | same as 'width' if 'direction' is `vert`, or same as 'height' if 'direction' is `horz` | Slider knob part width in px\r\n**knobheight** | int | same as 'width' if 'direction' is `vert`, or same as 'height' if 'direction' is `horz` | Slider knob part height in px\r\n**ditchLength** | int | ('height'-'knobheight') or ('width'-'knobwidth')  depends on 'direction' | Knob movable length\r\n**direction** | `\"vert\"`,`\"horz\"` | `\"vert\"` | Slider direction. vertical or horizontal\r\n**sensitivity** | float | `1` | Pointing device sensitivity. min-max range correspond to (128 / 'sensitivity') px\r\n**valuetip** | `0`,`1` | `1` | Enable the overlaid value-tip display.\r\n**tooltip** | string | `null` | Tooltip text that will be shown when mouse hover a while\r\n**enable** | `0`, `1` | `1` | Enable control with the pointing device.\r\n\r\n### webaudio-switch\r\n\r\nAttribute  | Options      | Default          | Description\r\n---        | ---                  | ---                 | ---\r\n**src** | string | Internal embedded resource is used if not specified | url of the vertical stitched switch image\r\n**value** | `0`,`1` | `0` | The current value (`0` or `1`). Also used as initial value of the switch if specified\r\n**defvalue** | `0`,`1` | Initial 'value' is used if not specified | The default value that will be used when ctrl+click\r\n**width** | int | `32` | Switch display width in px\r\n**height** | int | `32` | Switch display height in px\r\n**type** | `\"toggle\"`,`\"kick\"`,`\"radio\"` | `\"toggle\"` | Switch type. `\"toggle\"` switch has so-called 'checkbox' function. `\"radio\"` switch is a radio-button and the `\"kick\"` switch is a general command button\r\n**group** | string | `null` | Group id string used if the 'type' is `\"radio\"`. Only one switch will be set to `\"1\"` in same group\r\n**tooltip** | string | `null` | Tooltip text that will be shown when mouse hover a while\r\n**enable** | `0`,`1` | `1` | Enable control with the pointing device.\r\n\r\n### webaudio-param\r\n\r\nAttribute  | Options      | Default          | Description\r\n---        | ---                  | ---                 | ---\r\n**src** | string | Black rectangle if not specified | url of the background image. Transparent if set to `\"\"`\r\n**value** | float | `0` | The current value. Usually same as linked control\r\n**width** | int | `32` | Parameter display width in px\r\n**height** | int | `16` | Parameter display height in px\r\n**fontsize** | int | `9` | Font-size of the parameter display\r\n**color** | string | `\"#ffffff\"` | Text color\r\n**link** | string | `null` | Specify the linked webaudio-knob/slider/switch by Id\r\n\r\n### webaudio-keyboard\r\n\r\nAttribute  | Options      | Default          | Description\r\n---        | ---                  | ---                 | ---\r\n**values** | int array | `[]` | The array of current pressed key numbers. \"values\" may has more than one element in multi-touch environment.\r\n**width** | int | `480` | Keyboard display width in px\r\n**height** | int | `128` | Keyboard display height in px\r\n**min** | int | `0` | Lowest Key number. Each key is numbered incrementally from this number. If the \"min\" is not `0` and the modulo 12 is not zero, the keyboard is started from corresponding position (not-C). Note that the specified key should be a 'white-key'.\r\n**keys** | int | `25` | Number of keys. `25` means 25 keys keyboard.\r\n**colors** | string | '#222; #eee;#ccc; #333;#000; #e88;#c44; #c33;#800' | semicolon separated 9 keyboard colors. 'border; whitekey-grad-from;whitekey-grad-to; blackkey-grad-from;blackkey-grad-to; active-whitekey-grad-from;active-whitekey-grad-to; active-blackkey-grad-from;active-blackkey-grad-to'. Each key surface can has garadient left to right with 'from' and 'to'.\r\n**enable** | `0`,`1` | `1` | Enable control with the pointing device.\r\n\r\n---\r\n## Functions\r\n### setValue(value, fire)  \r\n`webaudio-knob` | `webaudio-slider` | `webaudio-switch`  \r\n**description**: Each control can be setup and redraw by calling this function from JavaScript.\r\nIf the `fire` parameter is `undefined` or `false`, this function will not fire `'change'` event. Or the `change` event will be fired.\r\n\r\n\r\n### setNote(state,note)  \r\n`webaudio-keyboard`  \r\n**description**: webaudio-keyboard can be setup pressing state with this function from JavaScript. corresponding key specified by the `note` is pressed if the `state` is non-zero otherwise the key is released. This function will NOT fire the 'change' event.\r\n\r\n---\r\n## Events\r\n### 'change'  \r\n`webaudio-knob` | `webaudio-slider` | `webaudio-switch` | `webaudio-keyboard`  \r\n**description**: 'change' event is emitted everytime value changes by user action or setValue() function with fire flag is `true`. In the event handler of `webaudio-knob`,`webaudio-slider` or `webaudio-switch`, current value can be get with referring `event.target.value`.  \r\n\r\n```\r\nvar knobs = document.getElementsByTagName('webaudio-knob');\r\nfor (var i = 0; i < knobs.length; i++) {\r\n  var knob = knobs[i];\r\n  knob.addEventListener('change', function(e) {\r\n    console.log(e.target.value);\r\n  });\r\n}\r\n```\r\n\r\nFor the `webaudio-keyboard`, each 'change' event has the property '.note' that contain a array `[key-state, key-number]`. For example `event.note = [1, 60]` if the key#60 is on, or `event.note = [0, 60]` if the key#60 is off.\r\n\r\n```\r\nvar keyboard = document.getElementsById('keyboard');\r\nkeyboard.addEventListener('change', function(e) {\r\n\tif(e.note[0])\r\n\t\tconsole.log(\"Note-On:\"+e.note[1]);\r\n\telse\r\n\t\tconsole.log(\"Note-Off:\"+e.note[1]);\r\n});\r\n```\r\n\r\n**Note**: The addEventListener() function is recommended for event handler setup instead of 'onchange=' attribute. 'onchange=' attribute seems not work on Safari.\r\n\r\n### 'cancel'\r\n`webaudio-knob` | `webaudio-slider`\r\n**description**: 'cancel' event is emitted when end of value editing by pointing device dragging.\r\n\r\n### 'click'  \r\n`webaudio-switch (kick)`  \r\n**description**: 'click' event is emitted if the 'kick' type webaudio-switch has clicked.\r\n\r\n---\r\n## Creating knob images\r\nwebaudio-knob (with sprites is `0` (default)) use a single frame knob image that indicate center position.\r\nFor example,  \r\n![](img/testknob.png)  \r\nThis image will be rotated from -135deg to +135deg. This approach will works well if the image is flat designed, but more complex animation (for example, drop-shadowed, highlighted or something elastic) will need pre-rendered frame-by-frame animation as below.\r\n\r\nwebaudio-knob (with non zero \"sprites\") use a vertical 'stitched' multi-frames animation image, and webaudio-switch use a vertical 'stitched' two-frames animation image.\r\nFor example,   \r\n![](https://raw.github.com/g200kg/webaudio-controls/master/img/LittlePhatty_sample.png)\r\n![](https://raw.github.com/g200kg/webaudio-controls/master/img/switch_toggle.png)  \r\n\r\nThis knob example has only 5 frames but it should has more frames for smooth animation. I recommend to use JKnobMan/WebKnobMan for making these stitched images,\r\n\r\n- [JKnobMan](http://www.g200kg.com/en/software/knobman.html) -- Java based Knob image creation tool.\r\n- [WebKnobMan](http://www.g200kg.com/en/webknobman/) -- WebApp version of the JknobMan\r\n- [KnobGallery](http://www.g200kg.com/en/webknobman/gallery.php) -- knob data sharing space\r\n\r\n---\r\n\r\nHere is a brief instruction  to export knob-image from KnobGallery\r\n\r\n- Go to [KnobGallery](http://www.g200kg.com/en/webknobman/gallery.php)\r\n- Find your favorite knob design and click 'Open with WebKnobMan'\r\n- Click on 'Export' to download `png` file\r\n- Of course, you can create your own!\r\n\r\n**Note: comply with license requirements**\r\n\r\n---\r\n## License\r\nWebAudio-Controls is developped based on:  \r\n- [WebAudio-Knob](https://github.com/agektmr/webaudio-knob) by [Eiji Kitamura](http://google.com/+agektmr)  \r\n- [WebAudio-Slider](https://github.com/ryoyakawai/webaudio-slider) by [Ryoya KAWAI](https://plus.google.com/108242669191458983485/posts)  \r\n- [WebAudio-Switch](http://aikelab.net/switch/) by [Keisuke Ai](http://d.hatena.ne.jp/aike/)  \r\nIntegrated and enhanced by [g200kg](http://www.g200kg.com/)\r\n\r\nCopyright (c) 2013 Eiji Kitamura / Ryoya KAWAI / Keisuke Ai / g200kg (Tatsuya Shinyagaito)  \r\nLicensed under the Apache License, Version 2.0\r\n\r\n---\r\nKnob/Switch images in samples are from [Knob Gallery](http://www.g200kg.com/en/webknobman/gallery.php)  \r\n[switch_toggle.knob](http://www.g200kg.com/en/webknobman/gallery.php?m=p&p=58) by [az](http://bji.yukihotaru.com/) (c) 2011 [CC-BY](http://creativecommons.org/licenses/by/3.0/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}